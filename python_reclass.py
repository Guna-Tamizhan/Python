# -*- coding: utf-8 -*-
"""Python Reclass.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qd5XRPIEvJfaxWpNOH_Y7wy9jWgWpAIp
"""

# `  Data types:
'''  1.Numerical (int (1,2,3) ,float (4.3,5.3,7.6) ,complex number (3+5j ,4+2j))
     2.Seqvence (str ,list ,tuple)
     3.Booleon (True ,False)
     4.Dictionary (key : value)
     5.Set (value)   '''

"""#String " "
"""

#Slicing
name = 'good moring'  # g=0,o=1,o=2,d=3, =4,m=5,o=6,r=7,i=8,n=9,g=10

name[5:11]

name[5:]

name[:]

name[1:11:2]  # 1 la erunthu 11 varikum eduthuum 2nd letters mattum tha varum

#concatenation
f_name = 'guna'
l_name = 'sekaran'

fullname = f_name + l_name
fullname

fullname = f_name +' '+ l_name
fullname

#All letter capital
name = 'Moring'
name.upper()

#All letter small
name.lower()

#remove space
name = "  guna "
name.strip()

#first letter capital
name = "guna sekaran"
name.capitalize()

#replace
sentence = 'Hi, I am doing good,I am awesome'
sentence.replace('I am','we are')

# use print statment
sentence = 'Hi, I am doing good,I am awesome'
print(sentence)
print(sentence.replace('Hi','Hello'))
print(sentence.replace('I am','we are'))

#first sentence replace
sentence.replace('I am','we are',1)

m = 4e3
# Assuming you meant 4 * 10^0,  or just 4.  If you intended something else, please clarify.
m

m

"""#List[  ]"""

''' 1.Collection of elements
    2.Diffrent data type
    3.Mutable
    4.Ordered '''

l1 = [1,3,5,7,9]

#Adding element
l1.append(11)
l1

#Add element for particular use index
l1.insert(2,'Hello')
l1

l2 = ['good','moring']

#concat tow list
l1.extend(l2)
l1

l3 = ['every','one']
l4 = ['i','am','guna']

#concat multiply list
l1.extend(l3+l4)
print(l1)

#delect element use value
l1.remove('Hello')
l1

l1 = [1,2,3,5,6,1,3,6]
l1.remove(1)
l1

a1 = [1,4,2,7,4,3,6,'a','d','x','c','w','f']
a2 = [2,5,1,3,6,4]

a2.sort()
a2

x1 = [str(x) for x in a1]
x1.sort()
x1

#delect elements for index
l1.pop(4)
l1

# reverse the values
x1 = [1,5,2,"a","g","x","v"]
x1.reverse()
print(x1)

#list mutabling
l1 = ['a','b','d','d']

l1[2]='c'

l1

"""#Tuple( )"""

''' 1.collection of elements with  diffrent datatype
      which are  " immutable "   '''

l = [24,46]
l[1] = 21
l

l = (24,46)

l[1] = 21

l[0]

l = ([1,2,3],[4,5,6])
l[4] = 4
l



"""#Dictionary{ key: value}"""

''' 1.Collection of key and value pairs
    2.Mutable
    3.Use diffrent data type
    4.collection of elements  '''

#Difining dictionary
x = {'name' : ['guna' , 'madhi' , 'nepo'],
     'age' : [21,22,23]}

# name is key
# inside of list is value
#assning value use list or tuple

x

#key
print(x.keys())
x.keys()

#value
print(x.values())

#create (or) add a new key and value
x['country'] = 'India'  #add multipul values use list
print(x)

x['name']

#to delect a particular key
x.pop('country')

#to delete a particular element from the key's value list
del x['name'][0]

print(x)

#clear toatl table
x.clear()

x

#remove all dictionary
del x

x

"""#set { values }"""

''' 1.collextion of elements
    2.mutable
    3.us diffrent data type
    4.don't accept duplicate values
    5.accept unique value
    6.arrange ase order
    7.unorder  '''

x = {23,4,6,3,5,78,23,5,3,4}

print(x)

# remove duplicate values
# accept only unique values

#remove a particular value
x.discard(23)
x

x

"""#Operators

##Arithmetic
"""

'''  +,-,*,/,% '''

x = 45
y = 75

x+y

x-y

x*y

x/y

x%y

#use power
x**y

"""##comparison operator"""

''' ==,!=.<,>,<=,>=  '''

a = 32
b = 44

a == b

a != b

a<b

a>b

a<=b

a>=b

"""##Indemtity operators"""

'''  in , is ,notin , isnot  '''

z = [1,4,7,3,1,5,83]

5 in z

5 not in z

5 is z

5 is not z

"""##Logical operators"""

'''  use true or fales
     1.And
     2.Or
     3.Not  '''

# Keywords
help()

"""#Conditionals"""

'''  1. if
     2. if - else
     3. if - elif - else
     4. nested conditionals

     working on booleon    '''

# if
age = int(input('enter your age: '))
if age >= 18:
  print('voter')

price = int(input('enter price: '))
if price > 100:
  print('welcome')

age = int(input('enter your age: '))
if age >= 18 and age <=35:
  print('your young blood')

cost = int(input('Enter your cost: '))
if cost >=100 and cost <=1000:
  print('eligible for gift')

# if and alse
age = int(input('enter your age: '))
if age >= 18 and age <=35:
  print('your young blood')
else:
  print('non young blood')

mark = int(input('enter your mark: '))
if mark >= 35:
  print('pass')
else:
  print('fill')

exp = int(input('Enter your experens: '))
if exp >= 2:
  print('eligible for increment')
else:
  print('no increment')

price = int(input('enter your price: '))
if price >= 1000:
  print(f"Bill: {price*0.8}")   # string formet
else:
  print(f'Bill: {price}')

price = int(input('enter your price: '))
if price >= 1000:
  print(f"Bill: {price*0.8}")
else:
  print(f'Bill: {price}')

price = int(input('enter your price: '))
if price >= 2000:
  print(f"Bill: {price*0.7}")
else:
  print(f'Bill: {price*0.8}')

'''   100 to 1000 = 10% discound
      1000 to 2000 = 20% discound
      2000 above =30% discound '''

# if - elif - else

price = int(input('enter price: '))
if price >=100 and price <=1000:
  print(f'total bill: {round(price*0.9)}')
elif price >1000 and price <=2000:
  print(f'total bill: {round(price*0.8)}')
elif price >2000 and price<=3000:
  print(f'total bill: {round(price*0.7)}')
elif price>3000:
  print(f'total bill: {round(price*0.5)}')
else:
  print(f'total bill: {price}')

#Nested if

price = int(input('enter price: '))
if price >=100 and price <=1000:
  print(f'total bill: {round(price*0.9)}')
elif price >1000 and price <=2000:
  print(f'total bill: {round(price*0.8)}')
elif price >2000 and price<=3000:
  if price == 2999:
    print('congratulations you select Goa trip')
  print(f'total bill: {round(price*0.7)}')
elif price>3000:
  print(f'total bill: {round(price*0.5)}')
else:
  print(f'total bill: {price}')

price = int(input('Enter price: '))

if 100 <= price <= 1000:
    discount = 0.10
    total = round(price * (1 - discount))
    print(f"10% discount applied. Total bill: â‚¹{total}")
elif 1000 < price <= 2000:
    discount = 0.20
    total = round(price * (1 - discount))
    print(f"20% discount applied. Total bill: â‚¹{total}")
elif 2000 < price <= 3000:
    if price == 2999:
        print("Congratulations! You selected the Goa trip ðŸŽ‰")
    discount = 0.30
    total = round(price * (1 - discount))
    print(f"30% discount applied. Total bill: â‚¹{total}")
elif price > 3000:
    discount = 0.50
    total = round(price * (1 - discount))
    print(f"50% discount applied. Total bill: â‚¹{total}")
else:
    print(f"No discount applied. Total bill: â‚¹{price}")

"""#Loop controls

**while loop**
"""

joining_age = int(input('Enter joining age: '))
while joining_age <=60:
  print(joining_age)
  joining_age = joining_age+1  #increment operater

atm = int(input('case: '))
while atm != 0 and atm>100:
  print(atm,end=" ,")
  atm-=100  #increment operator
else:
  print('No more Amount')

"""**For Loop**"""

l = [1,2,3,4,'guna','madhi','nepo',True,26.5]
for i in l:
  print(i)

name = 'Guna Sekaran'
for i in name:
  print(i,end='  ')

fruits = ['chrry','pineapple','mango','apple']
for i in fruits:
  print(i)
  if i=='pineapple':
    print('above pineapple')

# Range function
for i in range(1,10):
  print(i)

for i in range(20,0,-2):
  print(i,end=' ')

a = int(input('enter start: '))
b=int(input('enter range: '))
c = int(input('enter table: '))
for i in range(a,b+1):
  print(i,'x',c,'=',i*c)

#break control
fruits = ['chrry','pineapple','mango','apple']
for i in fruits:
  if i == 'mango':
    print('it is apple')
    break
  print(i)

#pass control
fruits = ['chrry','pineapple','mango','apple']
for i in fruits:

  if i == 'mango':
    print('it is mango')
    pass
  print(i)

#continue control
fruits = ['chrry','pineapple','mango','apple']
for i in fruits:

  if i == 'mango':
    print('it is mango')
    continue
  print(i)

"""#Function"""

'''  function means stored the set of program
     identifi symbol ()  '''

def add(a,b):   #creat a function  , (a,b) means arquments
  c = a+b
  return c

add(3,5)  #  (3,5)  means parameter

def maths(a,b):
  c = a*b
  d = a/b
  return c,d

maths(25,5)

def maths(a,b):
  c = a*b
  d = a/b
  print(c,d)
maths(25,5)

def largh(a,b):
  if a>b:
    return (f'largh number is {a}' , f'small number is {b}')
  elif a==b:
    return 'Two number is same'
  else:
    return (f'largh number is {b}' , f'small number is {a}')

largh(63,63)

#split value types

a=[1,2,3,83.89,'guna',True,'one']
b=[8,5,2,45.5,'madhi',True,'Nepo']

def test(a):
  n = []  # creat empyt list for store a values
  for i in a:
    if type(i) == int or type(i) == float:  #  deffine values type
      n.append(i)   #stored value
  return n

test(a)

test(b)

def test(a):
  n = []  # creat empyt list for store a values
  for i in a:
    if type(i) == str or type(i) == bool:  #  deffien values type
      n.append(i)   #stored value
  return n

test(['ak',26,44,34,64,True,False])

"""#Swapping"""

# change the varible value
a = 5
b = 3
a,b = b,a

a

b

"""#**Nested Loops**"""

#  multiple iterations

l = [1,2,3,4,5,True,'guna',[6,7,8,'madhi'],(9,True,'nepo')]

def test(a):
  n=[]
  for i in a:
    if type(i) == list or type(i) == tuple:
      for j in i:
        if type(j) == int:
          n.append(j)
    else:
      if type(i) == int:
          n.append(i)
  return n

test(l)

"""Args"""

# *args useage

def dummy(a,b):
  pass

dummy(1,2,3)

def dummy1(*args):
  pass

dummy1(1,2,3,4,5)

l = [1,2,3,4,True]
m = (5,6,7,'Guna')
z = [8,9,'hello']

def dummy(*args):
  n = []
  for i in args:
    if type(i) == list:
      for j in i:
        if type(j) == int:
          n.append(j)
  return n

dummy(l,m,z)

"""#Lambda Function"""

#  Anonymous Function

def dummy(a,b):
  return a*b

dummy(2,5)

add = lambda a,b : a+b

'''  1. add 'function name'
     2. lambda 'keyword'
     3. a,b  'arqument'
     4. a+b  'logic'    '''

add(34,54)

mul = lambda a,b : a*b

mul(3,5)

squre = lambda a : a**2

squre(5)

largh = lambda a,b: a if a>b else b

largh(5,24)

largh = lambda a,b: print('a is greater') if a>b else (print('same value') if a==b else print('b is greater'))

largh(8,677)

largh(5,5)

fahr = lambda a : print('celsius: ',1.8*a+32)   #   use celsius to fahrenheit formula

fahr(38)

"""#Oops

##**Class and Method**
"""

'''    Class : When ever create a class
       Method: we have to create a Method

       class(' Blue print')
       Method ('Attributes')   '''

class person:
  pass

per = person()

print(type(per))

class dummy:
  def __init__ (self,name,age):    # Constructor
    self.name = name
    self.age = age

dum = dummy('Guna',22)
dum1 = dummy('madhi',21)
dum2 = dummy('nepo',20)

dum.name

dum1.age

# which method working of teat
class smortphone:
  def __init__ (self,brand,year):
    self.brand = brand
    self.year = year
  def __init__ (self,brand):
    self.brand = brand

sp1 = smortphone('vivo',2024)

sp = smortphone('vivo')

#usage of default parameters

class itv:
  def __init__ (self,name,age,dep = 'python'):
    self.name = name
    self.age = age
    self.dep = dep

per1 = itv('guna',22)
per2 = itv('nepo',22)
per3 = itv('madhi',22,'java')

print(per1.name)

per2.dep

per3.dep

# * Access Modifiers

class itv:
  def __init__(self,name,age):
    self.name = name
    self.__age = age  # private age method

per1 = itv('guna',22)

per1.name

per1.age

per1.__age

class itv:
  def __init__(self,name,age):
    self.name = name
    self.__age = age  #privet age method
  def get_age(self):  #viwe age method
    return self.__age

per1 = itv('guna',22)

per1.get_age()

'''   1.create an class called "Eagle bane"
      2.attributes = name,age,acc_no
      3.acc.no = privaet
      4.fetch acc_no using access modifiers
      5.create 5 objects '''

class eagle_bane:
  def __init__ (self,name,age,acc_no):
    self.name = name
    self.age = age
    self.__acc_no = acc_no
  def get(self):
    return self.__acc_no

per1 = eagle_bane('guna',22,12345)
per2 = eagle_bane('madhi',24,34512)
per3 = eagle_bane('nepo',21,83273)
per4 = eagle_bane('aftab',27,93759)
per5 = eagle_bane('ajay',22,845748)

per1.get()

"""##Encapsulation"""

''' some atributes (or)
even method }       private

keeping your data "private"   '''

'''  use two types
     1. Getter
     2. Setter     '''

class eagle_bane:
  def __init__ (self,name,age,acc_no):
    self.name = name
    self.age = age
    self.__acc_no = acc_no

  def get(self):          #Getter
    return self.__acc_no

  def set(self,acc_no):   #setter
    self.__acc_no = acc_no

per1 = eagle_bane('guna',22,12345)
per2 = eagle_bane('madhi',24,34512)

per1.set(645236)

per1.get()

'''  create a class SRM
     name,age,salary,exp
     privet age,salary
     getter age,salary
     setter age,salary '''

class srm:
  def __init__ (self,name,age,salary,exp):
    self.name = name
    self.__age = age
    self.__salary = salary
    self.exp = exp

  def get_age(self):
    return self.__age
  def get_salary(self):
    return self.__salary

  def set_age(self,age):
    self.__age = age
  def set_salary(self,salary):
    self.__salary = salary

per1 = srm("Guna",22,25000,2)
per2 = srm("Madhi",23,23000,3.5)
per3 = srm("Nepo",24,38498,5)

per1.name

per2.get_age()

per3.get_salary()

per3.set_salary(300000)

per3.get_salary()

# simple task

class BankAccount:
    def __init__(self):
        self.password = 2604
        self.__account_number = 824899  # Private attribute


        if self.__account_number == int(input("Enter account number: ")):
          print("corret account number")
        else:
          print("incorret account number")
          return

        if self.password == int(input("Enter Password: ")):
          print("corret password")
        else:
          print ("incoret password")
          return

        self.__balance = 0  # Protected attribute

    def deposit(self, amount):
        self.__balance += amount  # Method accessing protected attributes

    def credit(self, case ):
        self.__balance -= case

    def set_account_number(self,account_number):
      self.__account_number = account_number

    def get_account_number(self):
      return self.__account_number

    def get_balance(self):
      return self.__balance

bk = BankAccount()

bk.deposit(int(input("Enter deposit amount: ")))
bk.get_balance()

bk.credit(int(input("Enter credit amount: ")))
bk.get_balance()

bk.set_account_number(975185)

print(f"Account Number:  {bk.get_account_number()}")
print(f"Balance Amount:  {bk.get_balance()}")

"""##Inheritance"""

#creat one class

class animal:
  def __init__ ( self,name):
    self.name = name

  def eat(self):
    print(self.name + " " + "it is eating")

ani1 = animal("dog")

ani1.eat()

#creat agine one class
class dog(animal):   #insert before class name
  def __init__ (self,name,breed):
    self.breed = breed
    animal.__init__(self,name)   #inheritance before class

per2 = dog("Dog","Rottweilers")

per2.name

#parent class
class animal:
  def __init__ ( self,name):
    self.name = name

  def eat(self):
    print(self.name + " " + "is Danger")

#child class
class dog(animal):   #insert before class name
  def __init__ (self,name,breed):
    self.breed = breed
    animal.__init__(self,name)   #inheritance before class

  def get_breed(self):
    return self.breed

ani3 = dog("Karuppu","Rottweilers")

ani3.get_breed()

ani3.eat()

#parent class
class animal:
  def __init__(self,name):
    self.name = name
  def habit(self):
    print("The king of"+ " " + self.name)

#  use super() key word
#child class
class lion(animal):
  def __init__(self,forest,name):
    self.forest = forest
    super().__init__(name)  #don't write in self

p1 = animal("lion")

p1.habit()

p2 = lion("amazon","the gost")

p2.habit()

class animal:
  def bove(self):
    print("bow bow")

class dog(animal):
  pass

x = dog()

x.bove()

"""##Abstraction"""

'''  1. creation of blue print
     2.showing only neccessary data

     creating  SCHEMA /SKELETON  WHICH CAN BE USED FURTHER   '''

#import abstract
from abc import ABC,abstractmethod

class itv(ABC):      #that is class abstraction
  @abstractmethod    #that is function abstraction
  def students(self):
    pass

x = itv()    #don't creat abstract in object

class itv(ABC):
  @abstractmethod
  def students(self):
    pass

  @abstractmethod
  def deparment(self):
    pass

class data_sciance(itv):
  def student(self):
    return "Hello students"

  def web_devloper(self):
    return "Good morning"

p1 = data_sciance()

p1.student()

class showroom(ABC):
  @abstractmethod
  def hatchback_price(self):
      pass

class shift(showroom):
  def hatchback_price(self):
    price = 750000
    discount = 0.17
    print(f"The onrode price {price - (price*discount)}")

p1 = shift()

p1.hatchback_price()

from abc import ABC,abstractmethod

class itv(ABC):
  @abstractmethod
  def students(self):
    pass

  @abstractmethod
  def deparment(self):
    pass

class data_sciance(itv):
  def students(self):
    return "Hello students"

  def deparment(self):
    return "Good morning"

p2 = data_sciance()

p2.students()



"""##decoraturs"""

# function with in function
def deco(funk):
  def logic(*args):
    print("start hear")
    result = funk(*args)
    print(result)
    print("End hear")
  return logic

@deco
def add(a,b,c):
  return a+b+c

add(100,5,20)

"""#polymorphism"""

# polymorphism the same function in use a diffrent class

class